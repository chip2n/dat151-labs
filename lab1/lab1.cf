comment "//" ;
comment "/*" "*/" ;
comment "#" ;

Prog. Program ::= [Stm] ;

Fun. Function ::= Type Ident "(" [Arg] ")" "{" [Stm] "}" ;
Arg. Arg  ::= Type Ident ;
Par. Par  ::= Type ;
Dec. Decl ::= Type [Ident] ;
FDec. Decl ::= Type Ident "(" [Par] ")";
Qual. Qualifier ::= "using" QConst "::" QConst ;

terminator Stm "" ;
separator Decl "," ;
separator nonempty Ident "," ;
separator nonempty String "" ;
separator Arg "," ;
separator Par "," ;
separator Exp "," ;
separator nonempty Type "," ;

SExp.      Stm  ::= Exp ";" ;
SEmpty.    Stm  ::= ";" ;
SDecl.     Stm  ::= Decl ";" ;
SAss.      Stm  ::= Decl "=" Exp ";" ;
STypeDef.  Stm  ::= "typedef" Decl ";" ;
SQual.     Stm  ::= Qualifier ";" ;
SReturn.   Stm  ::= "return" Exp ";" ;
SFunction. Stm  ::= Function ;
SInlFunc.  Stm  ::= "inline" Function ;
SWhile.    Stm  ::= "while" "(" Exp ")" Stm ;
SBlock.    Stm  ::= "{" [Stm] "}" ;
SIf.       Stm  ::= "if" "(" Exp ")" Stm ;
SIfElse.   Stm  ::= "if" "(" Exp ")" Stm "else" Stm ;
SIfElseS.  Stm  ::= Exp "?" Exp ":" Exp ";" ;
SFor.      Stm  ::= "for" "(" Exp ";" Exp ";" Exp ")" Stm ;
SStruct.   Stm  ::= "struct" Ident "{" [Stm] "}" ";" ;

EAss.     Exp  ::= Ident "=" Exp;
EDeclAss. Exp  ::= Decl "=" Exp ;
EAdd.     Exp  ::= Exp "+" Exp ;
ESub.     Exp  ::= Exp "-" Exp ;
EMul.     Exp  ::= Exp "*" Exp ;
EShiftL.  Exp  ::= Exp "<<" Exp ;
EShiftR.  Exp  ::= Exp ">>" Exp ;
EConst.   Exp  ::= QConst "::" Ident ;
EVar.     Exp  ::= Ident ;
EString.  Exp  ::= [String] ;
EEqual.   Exp  ::= Exp "==" Exp ;
EDiv.     Exp  ::= Exp "/" Exp ;
EMod.     Exp  ::= Exp "%" Exp ;
EInt.     Exp  ::= Integer ;
EFloat.   Exp  ::= Integer "." Integer ;
ECall.    Exp  ::= Ident "(" [Exp] ")" ;
EMem.     Exp  ::= Exp "." Exp ;
EIndex.   Exp  ::= Ident "[" Exp "]" ;
EThrow.   Exp  ::= "throw" Exp ;
ENot.     Exp  ::= "!" Exp ;
EAnd.     Exp  ::= Exp "&&" Exp ;
EOr.      Exp  ::= Exp "||" Exp ;
EChar.    Exp  ::= Char ;
ELarge.   Exp  ::= Exp ">" Exp ;
ESmall.   Exp  ::= Exp "<" Exp ;
EFAccs.   Exp  ::= Exp "->" Exp ;
ENeq.     Exp  ::= Exp "!=" Exp ;
EPreInc.  Exp  ::= "++" Exp ;
EDeref.   Exp  ::= "*" Exp ;
ELeq.     Exp  ::= Exp "<=" Exp ;
EGeq.     Exp  ::= Exp ">=" Exp ;

coercions Exp 2;

TInt.     Type ::= "int" ;
TDouble.  Type ::= "double" ;
TVoid.    Type ::= "void" ;
TBool.    Type ::= "bool" ;
TConst.   Type ::= QConst ;
TRef.     Type ::= Type "&" ;
TConstOp. Type ::= "const" Type ;

QIdent.  QConst  ::= Ident ;
QWiee.   QConst  ::=  QConst "::" QConst ;
QLol.    QConst  ::=  Ident "<" [Type] ">" ;
