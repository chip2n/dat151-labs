comment "//" ;
comment "/*" "*/" ;
comment "#" ;

Prog. Program ::= [Stm] ;

Fun. Function ::= Type Ident "(" [Arg] ")" ;
Arg. Arg  ::= Type Ident ;
Arg2. Arg ::= Type ;
ArgDef. Arg ::= Type Ident "=" Exp ;
Dec. Decl ::= Type [Ident] ;
Qual. Qualifier ::= "using" QConst "::" QConst ;

terminator Stm "" ;
separator Decl "," ;
separator nonempty Ident "," ;
separator nonempty String "" ;
separator Arg "," ;
separator Exp "," ;
separator nonempty Type "," ;

SExp.      Stm  ::= Exp ";" ;
SEmpty.    Stm  ::= ";" ;
SDecl.     Stm  ::= Decl ";" ;
SAss.      Stm  ::= Decl "=" Exp ";" ;
STypeDef.  Stm  ::= "typedef" Decl ";" ;
SQual.     Stm  ::= Qualifier ";" ;
SReturn.   Stm  ::= "return" Exp ";" ;
SFunction. Stm  ::= Function "{" [Stm] "}";
SFuncDecl. Stm  ::= Function ";" ;
SInlFunc.  Stm  ::= "inline" Function ;
SWhile.    Stm  ::= "while" "(" Exp ")" Stm ;
SBlock.    Stm  ::= "{" [Stm] "}" ;
SIf.       Stm  ::= "if" "(" Exp ")" Stm ;
SIfElse.   Stm  ::= "if" "(" Exp ")" Stm "else" Stm ;
SIfElseS.  Stm  ::= Exp "?" Exp ":" Exp ";" ;
SFor.      Stm  ::= "for" "(" Exp ";" Exp ";" Exp ")" Stm ;
SStruct.   Stm  ::= "struct" Ident "{" [Stm] "}" ";" ;

EInt.     Exp15  ::= Integer ;
EFloat.   Exp15  ::= Integer "." Integer ;
ECall.    Exp15  ::= Ident "(" [Exp] ")" ;
EString.  Exp15  ::= [String] ;
ETrue.    Exp15  ::= "true";
EFalse.   Exp15  ::= "false";
EPostInc. Exp14  ::= Exp15 "++" ;
EPostDec. Exp14  ::= Exp15 "--" ;
EPreInc.  Exp13  ::= "++" Exp14 ;
EPreDex.  Exp13  ::= "--" Exp14 ;
ENeg.     Exp13  ::= "-" Exp14 ;
EMul.     Exp12  ::= Exp12 "*" Exp13 ;
EDiv.     Exp12  ::= Exp12 "/" Exp13 ;
EAdd.     Exp11  ::= Exp11 "+" Exp12 ;
ESub.     Exp11  ::= Exp11 "-" Exp12 ;
EGt.      Exp9   ::= Exp9 ">" Exp10 ;
ELt.      Exp9   ::= Exp9 "<" Exp10 ;
ELeq.     Exp9   ::= Exp9 "<=" Exp10 ;
EGeq.     Exp9   ::= Exp9 ">=" Exp10 ;
ENeq.     Exp8   ::= Exp8 "!=" Exp9 ;
EEq.      Exp8   ::= Exp8 "==" Exp9 ;
EAnd.     Exp4   ::= Exp4 "&&" Exp5 ;
EOr.      Exp3   ::= Exp3 "||" Exp4 ;
EAss.     Exp2   ::= Exp3 "=" Exp2;
EDeclAss. Exp    ::= Decl "=" Exp ;
EShiftL.  Exp    ::= Exp "<<" Exp ;
EShiftR.  Exp    ::= Exp ">>" Exp ;
EConst.   Exp    ::= QConst "::" QConst ;
EVar.     Exp    ::= Ident ;
EMod.     Exp    ::= Exp "%" Exp ;
EPwr.     Exp    ::= Exp "e" Integer ;
EMem.     Exp    ::= Exp "." Exp ;
EIndex.   Exp    ::= Ident "[" Exp "]" ;
EThrow.   Exp    ::= "throw" Exp ;
ENot.     Exp    ::= "!" Exp ;
EChar.    Exp    ::= Char ;
EFAccs.   Exp    ::= Exp "->" Exp ;
EDeref.   Exp    ::= "*" Exp ;
EAssDec.  Exp    ::= Exp "-=" Exp ;
EAssInc.  Exp    ::= Exp "+=" Exp ;

coercions Exp 15;

TInt.     Type ::= "int" ;
TDouble.  Type ::= "double" ;
TVoid.    Type ::= "void" ;
TBool.    Type ::= "bool" ;
TConst.   Type ::= QConst ;
TRef.     Type ::= Type "&" ;
TConstOp. Type ::= "const" Type ;

QIdent.  QConst  ::= Ident ;
QWiee.   QConst  ::=  QConst "::" QConst ;
QLol.    QConst  ::=  Ident "<" [Type] ">" ;
