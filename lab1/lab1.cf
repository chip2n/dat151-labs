comment "//" ;
comment "/*" "*/" ;
comment "#" ;

Prog. Program ::= [Stm] ;

Fun. Function ::= Type Id "(" [Arg] ")" ;
Arg. Arg  ::= Type Id ;
Arg2. Arg ::= Type ;
ArgDef. Arg ::= Type Id "=" Exp ;
Dec. Decl ::= Type [Id] ;
Qual. Qualifier ::= "using" QConst "::" QConst ;

D. Declaration ::= Type [Id] ";" ;
terminator Stm "" ;
separator Decl "," ;
separator nonempty Id "," ;
separator nonempty String "" ;
separator Arg "," ;
separator Exp "," ;
separator nonempty Type "," ;
separator Declaration "" ;

SExp.      Stm  ::= Exp ";" ;
SEmpty.    Stm  ::= ";" ;
SDecl.     Stm  ::= Decl ";" ;
SAss.      Stm  ::= Decl "=" Exp ";" ;
STypeDef.  Stm  ::= "typedef" Decl ";" ;
SQual.     Stm  ::= Qualifier ";" ;
SReturn.   Stm  ::= "return" Exp ";" ;
SFunction. Stm  ::= Function "{" [Stm] "}";
SFuncDecl. Stm  ::= Function ";" ;
SInlFunc.  Stm  ::= "inline" Function ;
SWhile.    Stm  ::= "while" "(" Exp ")" Stm ;
SDoWhile.  Stm  ::= "do" Stm "while" "(" Exp ")" ";" ;
SBlock.    Stm  ::= "{" [Stm] "}" ;
SIf.       Stm  ::= "if" "(" Exp ")" Stm ;
SIfElse.   Stm  ::= "if" "(" Exp ")" Stm "else" Stm ;
SFor.      Stm  ::= "for" "(" Stm Stm Exp ")" Stm ;
SStruct.   Stm  ::= "struct" Id "{" [Declaration] "}" ";" ;

EInt.     Exp16  ::= Integer ;
EDouble.  Exp16  ::= Double ;
EChar.    Exp16  ::= Char ;
EString.  Exp16  ::= [String] ;
EVar.     Exp15  ::= Id ;
ETrue.    Exp16  ::= "true";
EFalse.   Exp16  ::= "false";
EConst.   Exp15  ::= QConst "::" QConst ;
EIndex.   Exp15  ::= Id "[" Exp "]" ;
ECall.    Exp15  ::= Id "(" [Exp] ")" ;
EMem.     Exp14  ::= Exp14 "." Exp15 ;
EFAccs.   Exp14  ::= Exp14 "->" Exp15 ;
EPostInc. Exp14  ::= Exp15 "++" ;
EPostDec. Exp14  ::= Exp15 "--" ;
EDeref.   Exp14  ::= "*" Exp15 ;
EPreInc.  Exp13  ::= "++" Exp14 ;
EPreDex.  Exp13  ::= "--" Exp14 ;
ENot.     Exp13  ::= "!" Exp14 ;
ENeg.     Exp13  ::= "-" Exp14 ;
EMul.     Exp12  ::= Exp12 "*" Exp13 ;
EDiv.     Exp12  ::= Exp12 "/" Exp13 ;
EMod.     Exp12  ::= Exp12 "%" Exp13 ;
EAdd.     Exp11  ::= Exp11 "+" Exp12 ;
ESub.     Exp11  ::= Exp11 "-" Exp12 ;
EShiftL.  Exp10  ::= Exp10 "<<" Exp11 ;
EShiftR.  Exp10  ::= Exp10 ">>" Exp11 ;
EGt.      Exp9   ::= Exp9 ">" Exp10 ;
ELt.      Exp9   ::= Exp9 "<" Exp10 ;
ELeq.     Exp9   ::= Exp9 "<=" Exp10 ;
EGeq.     Exp9   ::= Exp9 ">=" Exp10 ;
ENeq.     Exp8   ::= Exp8 "!=" Exp9 ;
EEq.      Exp8   ::= Exp8 "==" Exp9 ;
EAnd.     Exp4   ::= Exp4 "&&" Exp5 ;
EOr.      Exp3   ::= Exp3 "||" Exp4 ;
EAss.     Exp2   ::= Exp3 "=" Exp2;
EAssDec.  Exp2   ::= Exp3 "-=" Exp2 ;
EAssInc.  Exp2   ::= Exp3 "+=" Exp2 ;
EIfElse.  Exp2   ::= Exp3 "?" Exp2 ":" Exp2 ;
EThrow.   Exp1   ::= "throw" Exp2 ;

coercions Exp 16;

TInt.     Type ::= "int" ;
TDouble.  Type ::= "double" ;
TVoid.    Type ::= "void" ;
TBool.    Type ::= "bool" ;
TConst.   Type ::= QConst ;
TRef.     Type ::= Type "&" ;
TConstOp. Type ::= "const" Type ;

QId.  QConst  ::= Id ;
QWiee.   QConst  ::=  QConst "::" QConst ;
QLol.    QConst  ::=  Id "<" [Type] ">" ;

token Id (letter (letter | digit | '_')*) ;
